/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Up API
 * The Up API gives you programmatic access to your balances and
transaction data. You can request past transactions or set up
webhooks to receive real-time events when new transactions hit your
account. It‚Äôs new, it‚Äôs exciting and it‚Äôs just the beginning.

 * OpenAPI spec version: v1
 */
import type { TransactionStatusEnum } from './transactionStatusEnum';
import type { TransactionResourceAttributesHoldInfo } from './transactionResourceAttributesHoldInfo';
import type { TransactionResourceAttributesRoundUp } from './transactionResourceAttributesRoundUp';
import type { TransactionResourceAttributesCashback } from './transactionResourceAttributesCashback';
import type { MoneyObject } from './moneyObject';
import type { TransactionResourceAttributesForeignAmount } from './transactionResourceAttributesForeignAmount';
import type { TransactionResourceAttributesCardPurchaseMethod } from './transactionResourceAttributesCardPurchaseMethod';
import type { TransactionResourceAttributesNote } from './transactionResourceAttributesNote';
import type { TransactionResourceAttributesPerformingCustomer } from './transactionResourceAttributesPerformingCustomer';

export type TransactionResourceAttributes = {
  /** The current processing status of this transaction, according to
whether or not this transaction has settled or is still held.
 */
  status: TransactionStatusEnum;
  /**
   * The original, unprocessed text of the transaction. This is often not
a perfect indicator of the actual merchant, but it is useful for
reconciliation purposes in some cases.

   * @nullable
   */
  rawText: string | null;
  /** A short description for this transaction. Usually the merchant name
for purchases.
 */
  description: string;
  /**
   * Attached message for this transaction, such as a payment message, or a
transfer note.

   * @nullable
   */
  message: string | null;
  /** Boolean flag set to true on transactions that support the use of
categories.
 */
  isCategorizable: boolean;
  /**
   * If this transaction is currently in the `HELD` status, or was ever in
the `HELD` status, the `amount` and `foreignAmount` of the
transaction while `HELD`.

   * @nullable
   */
  holdInfo: TransactionResourceAttributesHoldInfo;
  /**
   * Details of how this transaction was rounded-up. If no Round Up was
applied this field will be `null`.

   * @nullable
   */
  roundUp: TransactionResourceAttributesRoundUp;
  /**
   * If all or part of this transaction was instantly reimbursed in the
form of cashback, details of the reimbursement.

   * @nullable
   */
  cashback: TransactionResourceAttributesCashback;
  /** The amount of this transaction in Australian dollars. For
transactions that were once `HELD` but are now `SETTLED`, refer to
the `holdInfo` field for the original `amount` the transaction was
`HELD` at.
 */
  amount: MoneyObject;
  /**
   * The foreign currency amount of this transaction. This field will be
`null` for domestic transactions. The amount was converted to the AUD
amount reflected in the `amount` of this transaction. Refer to the
`holdInfo` field for the original `foreignAmount` the transaction was
`HELD` at.

   * @nullable
   */
  foreignAmount: TransactionResourceAttributesForeignAmount;
  /**
   * Information about the card used for this transaction, if applicable.

   * @nullable
   */
  cardPurchaseMethod: TransactionResourceAttributesCardPurchaseMethod;
  /**
   * The date-time at which this transaction settled. This field will be
`null` for transactions that are currently in the `HELD` status.

   * @nullable
   */
  settledAt: string | null;
  /** The date-time at which this transaction was first encountered.
 */
  createdAt: string;
  /**
   * A description of the transaction method used e.g. Purchase, BPAY Payment.

   * @nullable
   */
  transactionType: string | null;
  /**
   * A customer provided note about the transaction.  Can only be provided by Up High subscribers.

   * @nullable
   */
  note: TransactionResourceAttributesNote;
  /**
   * The customer who initated the transaction.  For 2Up accounts this could be the customer who's card was used.

   * @nullable
   */
  performingCustomer: TransactionResourceAttributesPerformingCustomer;
};
