/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * Up API
 * The Up API gives you programmatic access to your balances and
transaction data. You can request past transactions or set up
webhooks to receive real-time events when new transactions hit your
account. It‚Äôs new, it‚Äôs exciting and it‚Äôs just the beginning.

 * OpenAPI spec version: v1
 */
import { z as zod } from 'zod';

export const getAccountsQueryParams = zod.object({
  "page[size]": zod.number().optional().describe('The number of records to return in each page.\n'),
  "filter[accountType]": zod.enum(['SAVER', 'TRANSACTIONAL', 'HOME_LOAN']).optional().describe('The type of account for which to return records. This\ncan be used to filter Savers from spending accounts.\n'),
  "filter[ownershipType]": zod.enum(['INDIVIDUAL', 'JOINT']).optional().describe('The account ownership structure for which to return\nrecords. This can be used to filter 2Up accounts from Up\naccounts.\n')
})

export const getAccountsResponse = zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `accounts`'),
  "id": zod.string().describe('The unique identifier for this account.\n'),
  "attributes": zod.object({
  "displayName": zod.string().describe('The name associated with the account in the Up application.\n'),
  "accountType": zod.enum(['SAVER', 'TRANSACTIONAL', 'HOME_LOAN']).describe('Specifies the type of bank account. Currently returned values are\n`SAVER`, `TRANSACTIONAL` and `HOME_LOAN`.\n').describe('The bank account type of this account.\n'),
  "ownershipType": zod.enum(['INDIVIDUAL', 'JOINT']).describe('Specifies the structure under which a bank account is owned. Currently\nreturned values are `INDIVIDUAL` and `JOINT`.\n').describe('The ownership structure for this account.\n'),
  "balance": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The available balance of the account, taking into account any amounts\nthat are currently on hold.\n'),
  "createdAt": zod.string().datetime({}).describe('The date-time at which this account was first opened.\n')
}),
  "relationships": zod.object({
  "transactions": zod.object({
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
})
}),
  "links": zod.object({
  "self": zod.string().describe('The canonical link to this resource within the API.\n')
}).optional()
}).describe('Provides information about an Up bank account.\n')).describe('The list of accounts returned in this response.\n'),
  "links": zod.object({
  "prev": zod.string().nullable().describe('The link to the previous page in the results. If this value is `null`\nthere is no previous page.\n'),
  "next": zod.string().nullable().describe('The link to the next page in the results. If this value is `null`\nthere is no next page.\n')
})
}).describe('Successful response to get all accounts. This returns a paginated list of\naccounts, which can be scrolled by following the `prev` and `next` links\nif present.\n')


export const getAccountsIdParams = zod.object({
  "id": zod.string().describe('The unique identifier for the account.\n')
})

export const getAccountsIdResponse = zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `accounts`'),
  "id": zod.string().describe('The unique identifier for this account.\n'),
  "attributes": zod.object({
  "displayName": zod.string().describe('The name associated with the account in the Up application.\n'),
  "accountType": zod.enum(['SAVER', 'TRANSACTIONAL', 'HOME_LOAN']).describe('Specifies the type of bank account. Currently returned values are\n`SAVER`, `TRANSACTIONAL` and `HOME_LOAN`.\n').describe('The bank account type of this account.\n'),
  "ownershipType": zod.enum(['INDIVIDUAL', 'JOINT']).describe('Specifies the structure under which a bank account is owned. Currently\nreturned values are `INDIVIDUAL` and `JOINT`.\n').describe('The ownership structure for this account.\n'),
  "balance": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The available balance of the account, taking into account any amounts\nthat are currently on hold.\n'),
  "createdAt": zod.string().datetime({}).describe('The date-time at which this account was first opened.\n')
}),
  "relationships": zod.object({
  "transactions": zod.object({
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
})
}),
  "links": zod.object({
  "self": zod.string().describe('The canonical link to this resource within the API.\n')
}).optional()
}).describe('Provides information about an Up bank account.\n').describe('The account returned in this response.\n')
}).describe('Successful response to get a single account.\n')


export const getAttachmentsResponse = zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `attachments`'),
  "id": zod.string().describe('The unique identifier for this attachment.\n'),
  "attributes": zod.object({
  "createdAt": zod.string().datetime({}).nullable().describe('The date-time when the file was created.\n'),
  "fileURL": zod.string().nullable().describe('A temporary link to download the file.\n'),
  "fileURLExpiresAt": zod.string().datetime({}).describe('The date-time at which the `fileURL` link expires.\n'),
  "fileExtension": zod.string().nullable().describe('File extension for the uploaded attachment.\n'),
  "fileContentType": zod.string().nullable().describe('Content type for the uploaded attachment.\n')
}),
  "relationships": zod.object({
  "transaction": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `transactions`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
})
}),
  "links": zod.object({
  "self": zod.string().describe('The canonical link to this resource within the API.\n')
}).optional()
})).describe('The list of attachments returned in this response.\n'),
  "links": zod.object({
  "prev": zod.string().nullable().describe('The link to the previous page in the results. If this value is `null`\nthere is no previous page.\n'),
  "next": zod.string().nullable().describe('The link to the next page in the results. If this value is `null`\nthere is no next page.\n')
})
}).describe('Successful response to get all attachments. This returns a paginated list of\nattachments, which can be scrolled by following the `prev` and `next` links if\npresent.\n')


export const getAttachmentsIdParams = zod.object({
  "id": zod.string().describe('The unique identifier for the attachment.\n')
})

export const getAttachmentsIdResponse = zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `attachments`'),
  "id": zod.string().describe('The unique identifier for this attachment.\n'),
  "attributes": zod.object({
  "createdAt": zod.string().datetime({}).nullable().describe('The date-time when the file was created.\n'),
  "fileURL": zod.string().nullable().describe('A temporary link to download the file.\n'),
  "fileURLExpiresAt": zod.string().datetime({}).describe('The date-time at which the `fileURL` link expires.\n'),
  "fileExtension": zod.string().nullable().describe('File extension for the uploaded attachment.\n'),
  "fileContentType": zod.string().nullable().describe('Content type for the uploaded attachment.\n')
}),
  "relationships": zod.object({
  "transaction": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `transactions`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
})
}),
  "links": zod.object({
  "self": zod.string().describe('The canonical link to this resource within the API.\n')
}).optional()
}).describe('The attachment returned in this response.\n')
}).describe('Successful response to get a single attachment.\n')


export const getCategoriesQueryParams = zod.object({
  "filter[parent]": zod.string().optional().describe('The unique identifier of a parent category for which to\nreturn only its children. Providing an invalid category\nidentifier results in a `404` response.\n')
})

export const getCategoriesResponse = zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier for this category. This is a human-readable but\nURL-safe value.\n'),
  "attributes": zod.object({
  "name": zod.string().describe('The name of this category as seen in the Up application.\n')
}),
  "relationships": zod.object({
  "parent": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}),
  "children": zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
})),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
})
}),
  "links": zod.object({
  "self": zod.string().describe('The canonical link to this resource within the API.\n')
}).optional()
}).describe('Provides information about a category and its ancestry.\n')).describe('The list of categories returned in this response.\n')
}).describe('Successful response to get all categories and their ancestry. The\nreturned list is not paginated.\n')


export const getCategoriesIdParams = zod.object({
  "id": zod.string().describe('The unique identifier for the category.\n')
})

export const getCategoriesIdResponse = zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier for this category. This is a human-readable but\nURL-safe value.\n'),
  "attributes": zod.object({
  "name": zod.string().describe('The name of this category as seen in the Up application.\n')
}),
  "relationships": zod.object({
  "parent": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}),
  "children": zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
})),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
})
}),
  "links": zod.object({
  "self": zod.string().describe('The canonical link to this resource within the API.\n')
}).optional()
}).describe('Provides information about a category and its ancestry.\n').describe('The category returned in this response.\n')
}).describe('Successful response to get a single category and its ancestry.\n')


export const patchTransactionsTransactionIdRelationshipsCategoryParams = zod.object({
  "transactionId": zod.string().describe('The unique identifier for the transaction.\n')
})

export const patchTransactionsTransactionIdRelationshipsCategoryBody = zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier of the category, as returned by the `/categories`\nendpoint.\n')
}).describe('Uniquely identifies a category in the API.\n').nullable().describe('The category to set on the transaction. Set this entire key to `null`\nde-categorize a transaction.\n')
}).describe('Request to update the category associated with a transaction.\n')


export const getTagsQueryParams = zod.object({
  "page[size]": zod.number().optional().describe('The number of records to return in each page.\n')
})

export const getTagsResponse = zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `tags`'),
  "id": zod.string().describe('The label of the tag, which also acts as the tag‚Äôs unique identifier.\n'),
  "relationships": zod.object({
  "transactions": zod.object({
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
})
})
}).describe('Provides information about a tag.\n')).describe('The list of tags returned in this response.\n'),
  "links": zod.object({
  "prev": zod.string().nullable().describe('The link to the previous page in the results. If this value is `null`\nthere is no previous page.\n'),
  "next": zod.string().nullable().describe('The link to the next page in the results. If this value is `null`\nthere is no next page.\n')
})
}).describe('Successful response to get all tags. This returns a paginated list of\ntags, which can be scrolled by following the `prev` and `next` links if\npresent.\n')


export const postTransactionsTransactionIdRelationshipsTagsParams = zod.object({
  "transactionId": zod.string().describe('The unique identifier for the transaction.\n')
})

export const postTransactionsTransactionIdRelationshipsTagsBody = zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `tags`'),
  "id": zod.string().describe('The label of the tag, which also acts as the tag‚Äôs unique identifier.\n')
}).describe('Uniquely identifies a single tag in the API.\n')).describe('The tags to add to or remove from the transaction.\n')
}).describe('Request to add or remove tags associated with a transaction.\n')


export const deleteTransactionsTransactionIdRelationshipsTagsParams = zod.object({
  "transactionId": zod.string().describe('The unique identifier for the transaction.\n')
})

export const deleteTransactionsTransactionIdRelationshipsTagsBody = zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `tags`'),
  "id": zod.string().describe('The label of the tag, which also acts as the tag‚Äôs unique identifier.\n')
}).describe('Uniquely identifies a single tag in the API.\n')).describe('The tags to add to or remove from the transaction.\n')
}).describe('Request to add or remove tags associated with a transaction.\n')


export const getTransactionsQueryParams = zod.object({
  "page[size]": zod.number().optional().describe('The number of records to return in each page.\n'),
  "filter[status]": zod.enum(['HELD', 'SETTLED']).optional().describe('The transaction status for which to return records. This\ncan be used to filter `HELD` transactions from those\nthat are `SETTLED`.\n'),
  "filter[since]": zod.string().datetime({}).optional().describe('The start date-time from which to return records,\nformatted according to rfc-3339. Not to be used for\npagination purposes.\n'),
  "filter[until]": zod.string().datetime({}).optional().describe('The end date-time up to which to return records,\nformatted according to rfc-3339. Not to be used for\npagination purposes.\n'),
  "filter[category]": zod.string().optional().describe('The category identifier for which to filter transactions.\nBoth parent and child categories can be filtered through\nthis parameter. Providing an invalid category identifier\nresults in a `404` response.\n'),
  "filter[tag]": zod.string().optional().describe('A transaction tag to filter for which to return records.\nIf the tag does not exist, zero records are returned and\na success response is given.\n')
})

export const getTransactionsResponse = zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `transactions`'),
  "id": zod.string().describe('The unique identifier for this transaction.\n'),
  "attributes": zod.object({
  "status": zod.enum(['HELD', 'SETTLED']).describe('Specifies which stage of processing a transaction is currently at.\nCurrently returned values are `HELD` and `SETTLED`. When a transaction is\nheld, its account‚Äôs `availableBalance` is affected. When a transaction is\nsettled, its account‚Äôs `currentBalance` is affected.\n').describe('The current processing status of this transaction, according to\nwhether or not this transaction has settled or is still held.\n'),
  "rawText": zod.string().nullable().describe('The original, unprocessed text of the transaction. This is often not\na perfect indicator of the actual merchant, but it is useful for\nreconciliation purposes in some cases.\n'),
  "description": zod.string().describe('A short description for this transaction. Usually the merchant name\nfor purchases.\n'),
  "message": zod.string().nullable().describe('Attached message for this transaction, such as a payment message, or a\ntransfer note.\n'),
  "isCategorizable": zod.boolean().describe('Boolean flag set to true on transactions that support the use of\ncategories.\n'),
  "holdInfo": zod.object({
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The amount of this transaction while in the `HELD` status, in\nAustralian dollars.\n'),
  "foreignAmount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').nullable().describe('The foreign currency amount of this transaction while in the `HELD`\nstatus. This field will be `null` for domestic transactions. The amount\nwas converted to the AUD amount reflected in the `amount` field.\n')
}).describe('Provides information about the amount at which a transaction was in the\n`HELD` status.\n').nullable().describe('If this transaction is currently in the `HELD` status, or was ever in\nthe `HELD` status, the `amount` and `foreignAmount` of the\ntransaction while `HELD`.\n'),
  "roundUp": zod.object({
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The total amount of this Round Up, including any boosts, represented as\na negative value.\n'),
  "boostPortion": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').nullable().describe('The portion of the Round Up `amount` owing to boosted Round Ups,\nrepresented as a negative value. If no boost was added to the Round Up\nthis field will be `null`.\n')
}).describe('Provides information about how a Round Up was applied, such as whether or\nnot a boost was included in the Round Up.\n').nullable().describe('Details of how this transaction was rounded-up. If no Round Up was\napplied this field will be `null`.\n'),
  "cashback": zod.object({
  "description": zod.string().describe('A brief description of why this cashback was paid.\n'),
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The total amount of cashback paid, represented as a positive value.\n')
}).describe('Provides information about an instant reimbursement in the form of\ncashback.\n').nullable().describe('If all or part of this transaction was instantly reimbursed in the\nform of cashback, details of the reimbursement.\n'),
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The amount of this transaction in Australian dollars. For\ntransactions that were once `HELD` but are now `SETTLED`, refer to\nthe `holdInfo` field for the original `amount` the transaction was\n`HELD` at.\n'),
  "foreignAmount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').nullable().describe('The foreign currency amount of this transaction. This field will be\n`null` for domestic transactions. The amount was converted to the AUD\namount reflected in the `amount` of this transaction. Refer to the\n`holdInfo` field for the original `foreignAmount` the transaction was\n`HELD` at.\n'),
  "cardPurchaseMethod": zod.object({
  "method": zod.enum(['BAR_CODE', 'OCR', 'CARD_PIN', 'CARD_DETAILS', 'CARD_ON_FILE', 'ECOMMERCE', 'MAGNETIC_STRIPE', 'CONTACTLESS']).describe('Specifies the type of card charge.\n').describe('The type of card purchase.\n'),
  "cardNumberSuffix": zod.string().nullable().describe('The last four digits of the card used for the purchase, if applicable.\n')
}).describe('Provides information about the card used for a transaction.\n').nullable().describe('Information about the card used for this transaction, if applicable.\n'),
  "settledAt": zod.string().datetime({}).nullable().describe('The date-time at which this transaction settled. This field will be\n`null` for transactions that are currently in the `HELD` status.\n'),
  "createdAt": zod.string().datetime({}).describe('The date-time at which this transaction was first encountered.\n'),
  "transactionType": zod.string().nullable().describe('A description of the transaction method used e.g. Purchase, BPAY Payment.\n'),
  "note": zod.object({
  "text": zod.string().describe('A text note about the transaction.\n')
}).describe('Provides information about the note and attachement.\n').nullable().describe('A customer provided note about the transaction.  Can only be provided by Up High subscribers.\n'),
  "performingCustomer": zod.object({
  "displayName": zod.string().describe('The Upname or preferred name of the customer\n')
}).describe('Provides information about the customer who initiated a transaction\n').nullable().describe('The customer who initated the transaction.  For 2Up accounts this could be the customer who\'s card was used.\n')
}),
  "relationships": zod.object({
  "account": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `accounts`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}),
  "transferAccount": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `accounts`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}).describe('If this transaction is a transfer between accounts, this relationship\nwill contain the account the transaction went to/came from. The\n`amount` field can be used to determine the direction of the transfer.\n'),
  "category": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "self": zod.string().describe('The link to retrieve or modify linkage between this resources and the\nrelated resource(s) in this relationship.\n'),
  "related": zod.string().optional().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}),
  "parentCategory": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}),
  "tags": zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `tags`'),
  "id": zod.string().describe('The label of the tag, which also acts as the tag‚Äôs unique identifier.\n')
})),
  "links": zod.object({
  "self": zod.string().describe('The link to retrieve or modify linkage between this resources and the\nrelated resource(s) in this relationship.\n')
}).optional()
}),
  "attachment": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `attachments`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
})
}),
  "links": zod.object({
  "self": zod.string().describe('The canonical link to this resource within the API.\n')
}).optional()
})).describe('The list of transactions returned in this response.\n'),
  "links": zod.object({
  "prev": zod.string().nullable().describe('The link to the previous page in the results. If this value is `null`\nthere is no previous page.\n'),
  "next": zod.string().nullable().describe('The link to the next page in the results. If this value is `null`\nthere is no next page.\n')
})
}).describe('Successful response to get all transactions. This returns a paginated\nlist of transactions, which can be scrolled by following the `prev` and\n`next` links if present.\n')


export const getTransactionsIdParams = zod.object({
  "id": zod.string().describe('The unique identifier for the transaction.\n')
})

export const getTransactionsIdResponse = zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `transactions`'),
  "id": zod.string().describe('The unique identifier for this transaction.\n'),
  "attributes": zod.object({
  "status": zod.enum(['HELD', 'SETTLED']).describe('Specifies which stage of processing a transaction is currently at.\nCurrently returned values are `HELD` and `SETTLED`. When a transaction is\nheld, its account‚Äôs `availableBalance` is affected. When a transaction is\nsettled, its account‚Äôs `currentBalance` is affected.\n').describe('The current processing status of this transaction, according to\nwhether or not this transaction has settled or is still held.\n'),
  "rawText": zod.string().nullable().describe('The original, unprocessed text of the transaction. This is often not\na perfect indicator of the actual merchant, but it is useful for\nreconciliation purposes in some cases.\n'),
  "description": zod.string().describe('A short description for this transaction. Usually the merchant name\nfor purchases.\n'),
  "message": zod.string().nullable().describe('Attached message for this transaction, such as a payment message, or a\ntransfer note.\n'),
  "isCategorizable": zod.boolean().describe('Boolean flag set to true on transactions that support the use of\ncategories.\n'),
  "holdInfo": zod.object({
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The amount of this transaction while in the `HELD` status, in\nAustralian dollars.\n'),
  "foreignAmount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').nullable().describe('The foreign currency amount of this transaction while in the `HELD`\nstatus. This field will be `null` for domestic transactions. The amount\nwas converted to the AUD amount reflected in the `amount` field.\n')
}).describe('Provides information about the amount at which a transaction was in the\n`HELD` status.\n').nullable().describe('If this transaction is currently in the `HELD` status, or was ever in\nthe `HELD` status, the `amount` and `foreignAmount` of the\ntransaction while `HELD`.\n'),
  "roundUp": zod.object({
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The total amount of this Round Up, including any boosts, represented as\na negative value.\n'),
  "boostPortion": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').nullable().describe('The portion of the Round Up `amount` owing to boosted Round Ups,\nrepresented as a negative value. If no boost was added to the Round Up\nthis field will be `null`.\n')
}).describe('Provides information about how a Round Up was applied, such as whether or\nnot a boost was included in the Round Up.\n').nullable().describe('Details of how this transaction was rounded-up. If no Round Up was\napplied this field will be `null`.\n'),
  "cashback": zod.object({
  "description": zod.string().describe('A brief description of why this cashback was paid.\n'),
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The total amount of cashback paid, represented as a positive value.\n')
}).describe('Provides information about an instant reimbursement in the form of\ncashback.\n').nullable().describe('If all or part of this transaction was instantly reimbursed in the\nform of cashback, details of the reimbursement.\n'),
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The amount of this transaction in Australian dollars. For\ntransactions that were once `HELD` but are now `SETTLED`, refer to\nthe `holdInfo` field for the original `amount` the transaction was\n`HELD` at.\n'),
  "foreignAmount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').nullable().describe('The foreign currency amount of this transaction. This field will be\n`null` for domestic transactions. The amount was converted to the AUD\namount reflected in the `amount` of this transaction. Refer to the\n`holdInfo` field for the original `foreignAmount` the transaction was\n`HELD` at.\n'),
  "cardPurchaseMethod": zod.object({
  "method": zod.enum(['BAR_CODE', 'OCR', 'CARD_PIN', 'CARD_DETAILS', 'CARD_ON_FILE', 'ECOMMERCE', 'MAGNETIC_STRIPE', 'CONTACTLESS']).describe('Specifies the type of card charge.\n').describe('The type of card purchase.\n'),
  "cardNumberSuffix": zod.string().nullable().describe('The last four digits of the card used for the purchase, if applicable.\n')
}).describe('Provides information about the card used for a transaction.\n').nullable().describe('Information about the card used for this transaction, if applicable.\n'),
  "settledAt": zod.string().datetime({}).nullable().describe('The date-time at which this transaction settled. This field will be\n`null` for transactions that are currently in the `HELD` status.\n'),
  "createdAt": zod.string().datetime({}).describe('The date-time at which this transaction was first encountered.\n'),
  "transactionType": zod.string().nullable().describe('A description of the transaction method used e.g. Purchase, BPAY Payment.\n'),
  "note": zod.object({
  "text": zod.string().describe('A text note about the transaction.\n')
}).describe('Provides information about the note and attachement.\n').nullable().describe('A customer provided note about the transaction.  Can only be provided by Up High subscribers.\n'),
  "performingCustomer": zod.object({
  "displayName": zod.string().describe('The Upname or preferred name of the customer\n')
}).describe('Provides information about the customer who initiated a transaction\n').nullable().describe('The customer who initated the transaction.  For 2Up accounts this could be the customer who\'s card was used.\n')
}),
  "relationships": zod.object({
  "account": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `accounts`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}),
  "transferAccount": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `accounts`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}).describe('If this transaction is a transfer between accounts, this relationship\nwill contain the account the transaction went to/came from. The\n`amount` field can be used to determine the direction of the transfer.\n'),
  "category": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "self": zod.string().describe('The link to retrieve or modify linkage between this resources and the\nrelated resource(s) in this relationship.\n'),
  "related": zod.string().optional().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}),
  "parentCategory": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}),
  "tags": zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `tags`'),
  "id": zod.string().describe('The label of the tag, which also acts as the tag‚Äôs unique identifier.\n')
})),
  "links": zod.object({
  "self": zod.string().describe('The link to retrieve or modify linkage between this resources and the\nrelated resource(s) in this relationship.\n')
}).optional()
}),
  "attachment": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `attachments`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
})
}),
  "links": zod.object({
  "self": zod.string().describe('The canonical link to this resource within the API.\n')
}).optional()
}).describe('The transaction returned in this response.\n')
}).describe('Successful response to get a single transaction.\n')


export const getAccountsAccountIdTransactionsParams = zod.object({
  "accountId": zod.string().describe('The unique identifier for the account.\n')
})

export const getAccountsAccountIdTransactionsQueryParams = zod.object({
  "page[size]": zod.number().optional().describe('The number of records to return in each page.\n'),
  "filter[status]": zod.enum(['HELD', 'SETTLED']).optional().describe('The transaction status for which to return records. This\ncan be used to filter `HELD` transactions from those\nthat are `SETTLED`.\n'),
  "filter[since]": zod.string().datetime({}).optional().describe('The start date-time from which to return records,\nformatted according to rfc-3339. Not to be used for\npagination purposes.\n'),
  "filter[until]": zod.string().datetime({}).optional().describe('The end date-time up to which to return records,\nformatted according to rfc-3339. Not to be used for\npagination purposes.\n'),
  "filter[category]": zod.string().optional().describe('The category identifier for which to filter transactions.\nBoth parent and child categories can be filtered through\nthis parameter. Providing an invalid category identifier\nresults in a `404` response.\n'),
  "filter[tag]": zod.string().optional().describe('A transaction tag to filter for which to return records.\nIf the tag does not exist, zero records are returned and\na success response is given.\n')
})

export const getAccountsAccountIdTransactionsResponse = zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `transactions`'),
  "id": zod.string().describe('The unique identifier for this transaction.\n'),
  "attributes": zod.object({
  "status": zod.enum(['HELD', 'SETTLED']).describe('Specifies which stage of processing a transaction is currently at.\nCurrently returned values are `HELD` and `SETTLED`. When a transaction is\nheld, its account‚Äôs `availableBalance` is affected. When a transaction is\nsettled, its account‚Äôs `currentBalance` is affected.\n').describe('The current processing status of this transaction, according to\nwhether or not this transaction has settled or is still held.\n'),
  "rawText": zod.string().nullable().describe('The original, unprocessed text of the transaction. This is often not\na perfect indicator of the actual merchant, but it is useful for\nreconciliation purposes in some cases.\n'),
  "description": zod.string().describe('A short description for this transaction. Usually the merchant name\nfor purchases.\n'),
  "message": zod.string().nullable().describe('Attached message for this transaction, such as a payment message, or a\ntransfer note.\n'),
  "isCategorizable": zod.boolean().describe('Boolean flag set to true on transactions that support the use of\ncategories.\n'),
  "holdInfo": zod.object({
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The amount of this transaction while in the `HELD` status, in\nAustralian dollars.\n'),
  "foreignAmount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').nullable().describe('The foreign currency amount of this transaction while in the `HELD`\nstatus. This field will be `null` for domestic transactions. The amount\nwas converted to the AUD amount reflected in the `amount` field.\n')
}).describe('Provides information about the amount at which a transaction was in the\n`HELD` status.\n').nullable().describe('If this transaction is currently in the `HELD` status, or was ever in\nthe `HELD` status, the `amount` and `foreignAmount` of the\ntransaction while `HELD`.\n'),
  "roundUp": zod.object({
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The total amount of this Round Up, including any boosts, represented as\na negative value.\n'),
  "boostPortion": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').nullable().describe('The portion of the Round Up `amount` owing to boosted Round Ups,\nrepresented as a negative value. If no boost was added to the Round Up\nthis field will be `null`.\n')
}).describe('Provides information about how a Round Up was applied, such as whether or\nnot a boost was included in the Round Up.\n').nullable().describe('Details of how this transaction was rounded-up. If no Round Up was\napplied this field will be `null`.\n'),
  "cashback": zod.object({
  "description": zod.string().describe('A brief description of why this cashback was paid.\n'),
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The total amount of cashback paid, represented as a positive value.\n')
}).describe('Provides information about an instant reimbursement in the form of\ncashback.\n').nullable().describe('If all or part of this transaction was instantly reimbursed in the\nform of cashback, details of the reimbursement.\n'),
  "amount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').describe('The amount of this transaction in Australian dollars. For\ntransactions that were once `HELD` but are now `SETTLED`, refer to\nthe `holdInfo` field for the original `amount` the transaction was\n`HELD` at.\n'),
  "foreignAmount": zod.object({
  "currencyCode": zod.string().describe('The ISO 4217 currency code.\n'),
  "value": zod.string().describe('The amount of money, formatted as a string in the relevant currency.\nFor example, for an Australian dollar value of $10.56, this field will\nbe `\"10.56\"`. The currency symbol is not included in the string.\n'),
  "valueInBaseUnits": zod.number().describe('The amount of money in the smallest denomination for the currency, as a\n64-bit integer.  For example, for an Australian dollar value of $10.56,\nthis field will be `1056`.\n')
}).describe('Provides information about a value of money.\n').nullable().describe('The foreign currency amount of this transaction. This field will be\n`null` for domestic transactions. The amount was converted to the AUD\namount reflected in the `amount` of this transaction. Refer to the\n`holdInfo` field for the original `foreignAmount` the transaction was\n`HELD` at.\n'),
  "cardPurchaseMethod": zod.object({
  "method": zod.enum(['BAR_CODE', 'OCR', 'CARD_PIN', 'CARD_DETAILS', 'CARD_ON_FILE', 'ECOMMERCE', 'MAGNETIC_STRIPE', 'CONTACTLESS']).describe('Specifies the type of card charge.\n').describe('The type of card purchase.\n'),
  "cardNumberSuffix": zod.string().nullable().describe('The last four digits of the card used for the purchase, if applicable.\n')
}).describe('Provides information about the card used for a transaction.\n').nullable().describe('Information about the card used for this transaction, if applicable.\n'),
  "settledAt": zod.string().datetime({}).nullable().describe('The date-time at which this transaction settled. This field will be\n`null` for transactions that are currently in the `HELD` status.\n'),
  "createdAt": zod.string().datetime({}).describe('The date-time at which this transaction was first encountered.\n'),
  "transactionType": zod.string().nullable().describe('A description of the transaction method used e.g. Purchase, BPAY Payment.\n'),
  "note": zod.object({
  "text": zod.string().describe('A text note about the transaction.\n')
}).describe('Provides information about the note and attachement.\n').nullable().describe('A customer provided note about the transaction.  Can only be provided by Up High subscribers.\n'),
  "performingCustomer": zod.object({
  "displayName": zod.string().describe('The Upname or preferred name of the customer\n')
}).describe('Provides information about the customer who initiated a transaction\n').nullable().describe('The customer who initated the transaction.  For 2Up accounts this could be the customer who\'s card was used.\n')
}),
  "relationships": zod.object({
  "account": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `accounts`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}),
  "transferAccount": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `accounts`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}).describe('If this transaction is a transfer between accounts, this relationship\nwill contain the account the transaction went to/came from. The\n`amount` field can be used to determine the direction of the transfer.\n'),
  "category": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "self": zod.string().describe('The link to retrieve or modify linkage between this resources and the\nrelated resource(s) in this relationship.\n'),
  "related": zod.string().optional().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}),
  "parentCategory": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `categories`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
}),
  "tags": zod.object({
  "data": zod.array(zod.object({
  "type": zod.string().describe('The type of this resource: `tags`'),
  "id": zod.string().describe('The label of the tag, which also acts as the tag‚Äôs unique identifier.\n')
})),
  "links": zod.object({
  "self": zod.string().describe('The link to retrieve or modify linkage between this resources and the\nrelated resource(s) in this relationship.\n')
}).optional()
}),
  "attachment": zod.object({
  "data": zod.object({
  "type": zod.string().describe('The type of this resource: `attachments`'),
  "id": zod.string().describe('The unique identifier of the resource within its type.\n')
}).nullable(),
  "links": zod.object({
  "related": zod.string().describe('The link to retrieve the related resource(s) in this relationship.\n')
}).optional()
})
}),
  "links": zod.object({
  "self": zod.string().describe('The canonical link to this resource within the API.\n')
}).optional()
})).describe('The list of transactions returned in this response.\n'),
  "links": zod.object({
  "prev": zod.string().nullable().describe('The link to the previous page in the results. If this value is `null`\nthere is no previous page.\n'),
  "next": zod.string().nullable().describe('The link to the next page in the results. If this value is `null`\nthere is no next page.\n')
})
}).describe('Successful response to get all transactions. This returns a paginated\nlist of transactions, which can be scrolled by following the `prev` and\n`next` links if present.\n')

