/**
 * Generated by orval v7.9.0 🍺
 * Do not edit manually.
 * Up API
 * The Up API gives you programmatic access to your balances and
transaction data. You can request past transactions or set up
webhooks to receive real-time events when new transactions hit your
account. It’s new, it’s exciting and it’s just the beginning.

 * OpenAPI spec version: v1
 */

import { customFetcher } from '../mutator/fetch';
import { ListAccountsResponse,
GetAccountsParams,
GetAccountResponse,
ListAttachmentsResponse,
GetAttachmentResponse,
ListCategoriesResponse,
GetCategoriesParams,
GetCategoryResponse,
UpdateTransactionCategoryRequest,
ListTagsResponse,
GetTagsParams,
UpdateTransactionTagsRequest,
ListTransactionsResponse,
GetTransactionsParams,
GetTransactionResponse,
GetAccountsAccountIdTransactionsParams } from './schemas';

export type getAccountsResponse200 = {
  data: ListAccountsResponse
  status: 200
}
    
export type getAccountsResponseComposite = getAccountsResponse200;
    
export type getAccountsResponse = getAccountsResponseComposite & {
  headers: Headers;
}

export const getGetAccountsUrl = (params?: GetAccountsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.up.com.au/api/v1/accounts?${stringifiedParams}` : `https://api.up.com.au/api/v1/accounts`
}

export const getAccounts = async (params?: GetAccountsParams, options?: RequestInit): Promise<getAccountsResponse> => {
  
  return customFetcher<getAccountsResponse>(getGetAccountsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAccountsIdResponse200 = {
  data: GetAccountResponse
  status: 200
}
    
export type getAccountsIdResponseComposite = getAccountsIdResponse200;
    
export type getAccountsIdResponse = getAccountsIdResponseComposite & {
  headers: Headers;
}

export const getGetAccountsIdUrl = (id: string,) => {


  

  return `https://api.up.com.au/api/v1/accounts/${id}`
}

export const getAccountsId = async (id: string, options?: RequestInit): Promise<getAccountsIdResponse> => {
  
  return customFetcher<getAccountsIdResponse>(getGetAccountsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAttachmentsResponse200 = {
  data: ListAttachmentsResponse
  status: 200
}
    
export type getAttachmentsResponseComposite = getAttachmentsResponse200;
    
export type getAttachmentsResponse = getAttachmentsResponseComposite & {
  headers: Headers;
}

export const getGetAttachmentsUrl = () => {


  

  return `https://api.up.com.au/api/v1/attachments`
}

export const getAttachments = async ( options?: RequestInit): Promise<getAttachmentsResponse> => {
  
  return customFetcher<getAttachmentsResponse>(getGetAttachmentsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAttachmentsIdResponse200 = {
  data: GetAttachmentResponse
  status: 200
}
    
export type getAttachmentsIdResponseComposite = getAttachmentsIdResponse200;
    
export type getAttachmentsIdResponse = getAttachmentsIdResponseComposite & {
  headers: Headers;
}

export const getGetAttachmentsIdUrl = (id: string,) => {


  

  return `https://api.up.com.au/api/v1/attachments/${id}`
}

export const getAttachmentsId = async (id: string, options?: RequestInit): Promise<getAttachmentsIdResponse> => {
  
  return customFetcher<getAttachmentsIdResponse>(getGetAttachmentsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getCategoriesResponse200 = {
  data: ListCategoriesResponse
  status: 200
}
    
export type getCategoriesResponseComposite = getCategoriesResponse200;
    
export type getCategoriesResponse = getCategoriesResponseComposite & {
  headers: Headers;
}

export const getGetCategoriesUrl = (params?: GetCategoriesParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.up.com.au/api/v1/categories?${stringifiedParams}` : `https://api.up.com.au/api/v1/categories`
}

export const getCategories = async (params?: GetCategoriesParams, options?: RequestInit): Promise<getCategoriesResponse> => {
  
  return customFetcher<getCategoriesResponse>(getGetCategoriesUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getCategoriesIdResponse200 = {
  data: GetCategoryResponse
  status: 200
}
    
export type getCategoriesIdResponseComposite = getCategoriesIdResponse200;
    
export type getCategoriesIdResponse = getCategoriesIdResponseComposite & {
  headers: Headers;
}

export const getGetCategoriesIdUrl = (id: string,) => {


  

  return `https://api.up.com.au/api/v1/categories/${id}`
}

export const getCategoriesId = async (id: string, options?: RequestInit): Promise<getCategoriesIdResponse> => {
  
  return customFetcher<getCategoriesIdResponse>(getGetCategoriesIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type patchTransactionsTransactionIdRelationshipsCategoryResponse204 = {
  data: void
  status: 204
}
    
export type patchTransactionsTransactionIdRelationshipsCategoryResponseComposite = patchTransactionsTransactionIdRelationshipsCategoryResponse204;
    
export type patchTransactionsTransactionIdRelationshipsCategoryResponse = patchTransactionsTransactionIdRelationshipsCategoryResponseComposite & {
  headers: Headers;
}

export const getPatchTransactionsTransactionIdRelationshipsCategoryUrl = (transactionId: string,) => {


  

  return `https://api.up.com.au/api/v1/transactions/${transactionId}/relationships/category`
}

export const patchTransactionsTransactionIdRelationshipsCategory = async (transactionId: string,
    updateTransactionCategoryRequest: UpdateTransactionCategoryRequest, options?: RequestInit): Promise<patchTransactionsTransactionIdRelationshipsCategoryResponse> => {
  
  return customFetcher<patchTransactionsTransactionIdRelationshipsCategoryResponse>(getPatchTransactionsTransactionIdRelationshipsCategoryUrl(transactionId),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateTransactionCategoryRequest,)
  }
);}



export type getTagsResponse200 = {
  data: ListTagsResponse
  status: 200
}
    
export type getTagsResponseComposite = getTagsResponse200;
    
export type getTagsResponse = getTagsResponseComposite & {
  headers: Headers;
}

export const getGetTagsUrl = (params?: GetTagsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.up.com.au/api/v1/tags?${stringifiedParams}` : `https://api.up.com.au/api/v1/tags`
}

export const getTags = async (params?: GetTagsParams, options?: RequestInit): Promise<getTagsResponse> => {
  
  return customFetcher<getTagsResponse>(getGetTagsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type postTransactionsTransactionIdRelationshipsTagsResponse204 = {
  data: void
  status: 204
}
    
export type postTransactionsTransactionIdRelationshipsTagsResponseComposite = postTransactionsTransactionIdRelationshipsTagsResponse204;
    
export type postTransactionsTransactionIdRelationshipsTagsResponse = postTransactionsTransactionIdRelationshipsTagsResponseComposite & {
  headers: Headers;
}

export const getPostTransactionsTransactionIdRelationshipsTagsUrl = (transactionId: string,) => {


  

  return `https://api.up.com.au/api/v1/transactions/${transactionId}/relationships/tags`
}

export const postTransactionsTransactionIdRelationshipsTags = async (transactionId: string,
    updateTransactionTagsRequest: UpdateTransactionTagsRequest, options?: RequestInit): Promise<postTransactionsTransactionIdRelationshipsTagsResponse> => {
  
  return customFetcher<postTransactionsTransactionIdRelationshipsTagsResponse>(getPostTransactionsTransactionIdRelationshipsTagsUrl(transactionId),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateTransactionTagsRequest,)
  }
);}



export type deleteTransactionsTransactionIdRelationshipsTagsResponse204 = {
  data: void
  status: 204
}
    
export type deleteTransactionsTransactionIdRelationshipsTagsResponseComposite = deleteTransactionsTransactionIdRelationshipsTagsResponse204;
    
export type deleteTransactionsTransactionIdRelationshipsTagsResponse = deleteTransactionsTransactionIdRelationshipsTagsResponseComposite & {
  headers: Headers;
}

export const getDeleteTransactionsTransactionIdRelationshipsTagsUrl = (transactionId: string,) => {


  

  return `https://api.up.com.au/api/v1/transactions/${transactionId}/relationships/tags`
}

export const deleteTransactionsTransactionIdRelationshipsTags = async (transactionId: string,
    updateTransactionTagsRequest: UpdateTransactionTagsRequest, options?: RequestInit): Promise<deleteTransactionsTransactionIdRelationshipsTagsResponse> => {
  
  return customFetcher<deleteTransactionsTransactionIdRelationshipsTagsResponse>(getDeleteTransactionsTransactionIdRelationshipsTagsUrl(transactionId),
  {      
    ...options,
    method: 'DELETE',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateTransactionTagsRequest,)
  }
);}



export type getTransactionsResponse200 = {
  data: ListTransactionsResponse
  status: 200
}
    
export type getTransactionsResponseComposite = getTransactionsResponse200;
    
export type getTransactionsResponse = getTransactionsResponseComposite & {
  headers: Headers;
}

export const getGetTransactionsUrl = (params?: GetTransactionsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.up.com.au/api/v1/transactions?${stringifiedParams}` : `https://api.up.com.au/api/v1/transactions`
}

export const getTransactions = async (params?: GetTransactionsParams, options?: RequestInit): Promise<getTransactionsResponse> => {
  
  return customFetcher<getTransactionsResponse>(getGetTransactionsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getTransactionsIdResponse200 = {
  data: GetTransactionResponse
  status: 200
}
    
export type getTransactionsIdResponseComposite = getTransactionsIdResponse200;
    
export type getTransactionsIdResponse = getTransactionsIdResponseComposite & {
  headers: Headers;
}

export const getGetTransactionsIdUrl = (id: string,) => {


  

  return `https://api.up.com.au/api/v1/transactions/${id}`
}

export const getTransactionsId = async (id: string, options?: RequestInit): Promise<getTransactionsIdResponse> => {
  
  return customFetcher<getTransactionsIdResponse>(getGetTransactionsIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}



export type getAccountsAccountIdTransactionsResponse200 = {
  data: ListTransactionsResponse
  status: 200
}
    
export type getAccountsAccountIdTransactionsResponseComposite = getAccountsAccountIdTransactionsResponse200;
    
export type getAccountsAccountIdTransactionsResponse = getAccountsAccountIdTransactionsResponseComposite & {
  headers: Headers;
}

export const getGetAccountsAccountIdTransactionsUrl = (accountId: string,
    params?: GetAccountsAccountIdTransactionsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.up.com.au/api/v1/accounts/${accountId}/transactions?${stringifiedParams}` : `https://api.up.com.au/api/v1/accounts/${accountId}/transactions`
}

export const getAccountsAccountIdTransactions = async (accountId: string,
    params?: GetAccountsAccountIdTransactionsParams, options?: RequestInit): Promise<getAccountsAccountIdTransactionsResponse> => {
  
  return customFetcher<getAccountsAccountIdTransactionsResponse>(getGetAccountsAccountIdTransactionsUrl(accountId,params),
  {      
    ...options,
    method: 'GET'
    
    
  }
);}


