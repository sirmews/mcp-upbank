/**
 * Most of this file is generated by orval and copied from the generated server.ts file.
 *
 * Until some fixes are made to the orval output, we make manual adjustments here.
 */
import packageJson from "../package.json" assert { type: "json" };
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { registerPaginationTools } from "./pagination";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";

import {
	getAccountsHandler,
	getAccountsIdHandler,
	getAttachmentsHandler,
	getAttachmentsIdHandler,
	getCategoriesHandler,
	getCategoriesIdHandler,
	patchTransactionsTransactionIdRelationshipsCategoryHandler,
	getTagsHandler,
	postTransactionsTransactionIdRelationshipsTagsHandler,
	deleteTransactionsTransactionIdRelationshipsTagsHandler,
	getTransactionsHandler,
	getTransactionsIdHandler,
	getAccountsAccountIdTransactionsHandler,
} from "./gen/handlers";
import {
	getAccountsQueryParams,
	getAccountsIdParams,
	getAttachmentsIdParams,
	getCategoriesQueryParams,
	getCategoriesIdParams,
	patchTransactionsTransactionIdRelationshipsCategoryParams,
	patchTransactionsTransactionIdRelationshipsCategoryBody,
	getTagsQueryParams,
	postTransactionsTransactionIdRelationshipsTagsParams,
	postTransactionsTransactionIdRelationshipsTagsBody,
	deleteTransactionsTransactionIdRelationshipsTagsParams,
	deleteTransactionsTransactionIdRelationshipsTagsBody,
	getTransactionsQueryParams,
	getTransactionsIdParams,
	getAccountsAccountIdTransactionsParams,
	getAccountsAccountIdTransactionsQueryParams,
} from "./gen/tool-schemas.zod";

const server = new McpServer({
	name: "mcp-upbank",
	// read version from package.json
	version: packageJson.version,
});

/**
 * Custom definitions
 * Loop through each pagination handler and add it to the server
 */
registerPaginationTools(server);

server.tool(
	"getAccounts",
	"List accounts",
	{
		queryParams: getAccountsQueryParams,
	},
	getAccountsHandler,
);

server.tool(
	"getAccountsId",
	"Retrieve account",
	{
		pathParams: getAccountsIdParams,
	},
	getAccountsIdHandler,
);

server.tool("getAttachments", "List attachments", getAttachmentsHandler);

server.tool(
	"getAttachmentsId",
	"Retrieve attachment",
	{
		pathParams: getAttachmentsIdParams,
	},
	getAttachmentsIdHandler,
);

server.tool(
	"getCategories",
	"List categories",
	{
		queryParams: getCategoriesQueryParams,
	},
	getCategoriesHandler,
);

server.tool(
	"getCategoriesId",
	"Retrieve category",
	{
		pathParams: getCategoriesIdParams,
	},
	getCategoriesIdHandler,
);

server.tool(
	"patchTransactionsTransactionIdRelationshipsCategory",
	"Categorize transaction",
	{
		pathParams: patchTransactionsTransactionIdRelationshipsCategoryParams,
		bodyParams: patchTransactionsTransactionIdRelationshipsCategoryBody,
	},
	patchTransactionsTransactionIdRelationshipsCategoryHandler,
);

server.tool(
	"getTags",
	"List tags",
	{
		queryParams: getTagsQueryParams,
	},
	getTagsHandler,
);

server.tool(
	"postTransactionsTransactionIdRelationshipsTags",
	"Add tags to transaction",
	{
		pathParams: postTransactionsTransactionIdRelationshipsTagsParams,
		bodyParams: postTransactionsTransactionIdRelationshipsTagsBody,
	},
	postTransactionsTransactionIdRelationshipsTagsHandler,
);

server.tool(
	"deleteTransactionsTransactionIdRelationshipsTags",
	"Remove tags from transaction",
	{
		pathParams: deleteTransactionsTransactionIdRelationshipsTagsParams,
		bodyParams: deleteTransactionsTransactionIdRelationshipsTagsBody,
	},
	deleteTransactionsTransactionIdRelationshipsTagsHandler,
);

server.tool(
	"getTransactions",
	"List transactions",
	{
		queryParams: getTransactionsQueryParams,
	},
	getTransactionsHandler,
);

server.tool(
	"getTransactionsId",
	"Retrieve transaction",
	{
		pathParams: getTransactionsIdParams,
	},
	getTransactionsIdHandler,
);

server.tool(
	"getAccountsAccountIdTransactions",
	"List transactions by account",
	{
		pathParams: getAccountsAccountIdTransactionsParams,
		queryParams: getAccountsAccountIdTransactionsQueryParams,
	},
	getAccountsAccountIdTransactionsHandler,
);

const transport = new StdioServerTransport();

server
	.connect(transport)
	.then(() => {
		console.error("MCP server running on stdio");
	})
	.catch(console.error);
